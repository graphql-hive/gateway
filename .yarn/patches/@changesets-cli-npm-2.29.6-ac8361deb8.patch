diff --git a/dist/changesets-cli.cjs.js b/dist/changesets-cli.cjs.js
index 53fc925f8aa492e7333033483e9f3e45839963ad..81cc3183c9ce6097519c8a130ffc9f3087bca63c 100644
--- a/dist/changesets-cli.cjs.js
+++ b/dist/changesets-cli.cjs.js
@@ -630,30 +630,6 @@ function getCorrectRegistry(packageJson) {
     registry: !registry || registry === "https://registry.yarnpkg.com" ? "https://registry.npmjs.org" : registry
   };
 }
-async function getPublishTool(cwd) {
-  const pm = await packageManagerDetector.detect({
-    cwd
-  });
-  if (!pm || pm.name !== "pnpm") return {
-    name: "npm"
-  };
-  try {
-    let result = await spawn__default["default"]("pnpm", ["--version"], {
-      cwd
-    });
-    let version = result.stdout.toString().trim();
-    let parsed = semverParse__default["default"](version);
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: (parsed === null || parsed === void 0 ? void 0 : parsed.major) === undefined ? false : parsed.major >= 5
-    };
-  } catch (e) {
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: false
-    };
-  }
-}
 async function getTokenIsRequired() {
   const {
     scope,
@@ -744,16 +720,12 @@ let getOtpCode = async twoFactorState => {
 // we have this so that we can do try a publish again after a publish without
 // the call being wrapped in the npm request limit and causing the publishes to potentially never run
 async function internalPublish(packageJson, opts, twoFactorState) {
-  let publishTool = await getPublishTool(opts.cwd);
   let publishFlags = opts.access ? ["--access", opts.access] : [];
   publishFlags.push("--tag", opts.tag);
   if ((await twoFactorState.isRequired) && !ciInfo.isCI) {
     let otpCode = await getOtpCode(twoFactorState);
     publishFlags.push("--otp", otpCode);
   }
-  if (publishTool.name === "pnpm" && publishTool.shouldAddNoGitChecks) {
-    publishFlags.push("--no-git-checks");
-  }
   const {
     scope,
     registry
@@ -768,11 +740,9 @@ async function internalPublish(packageJson, opts, twoFactorState) {
     code,
     stdout,
     stderr
-  } = publishTool.name === "pnpm" ? await spawn__default["default"]("pnpm", ["publish", "--json", ...publishFlags], {
+  } = await spawn__default["default"]("yarn", ["npm", "publish", ...publishFlags], {
     env: Object.assign({}, process.env, envOverride),
     cwd: opts.cwd
-  }) : await spawn__default["default"](publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride)
   });
   if (code !== 0) {
     // NPM's --json output is included alongside the `prepublish` and `postpublish` output in terminal
diff --git a/dist/changesets-cli.esm.js b/dist/changesets-cli.esm.js
index 6c363c0551d7a5b69e2e48be0bcd757699609094..0981b98e21ef371ba3eb6a996a05046671736b57 100644
--- a/dist/changesets-cli.esm.js
+++ b/dist/changesets-cli.esm.js
@@ -592,30 +592,6 @@ function getCorrectRegistry(packageJson) {
     registry: !registry || registry === "https://registry.yarnpkg.com" ? "https://registry.npmjs.org" : registry
   };
 }
-async function getPublishTool(cwd) {
-  const pm = await detect({
-    cwd
-  });
-  if (!pm || pm.name !== "pnpm") return {
-    name: "npm"
-  };
-  try {
-    let result = await spawn$1("pnpm", ["--version"], {
-      cwd
-    });
-    let version = result.stdout.toString().trim();
-    let parsed = semverParse(version);
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: (parsed === null || parsed === void 0 ? void 0 : parsed.major) === undefined ? false : parsed.major >= 5
-    };
-  } catch (e) {
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: false
-    };
-  }
-}
 async function getTokenIsRequired() {
   const {
     scope,
@@ -706,16 +682,12 @@ let getOtpCode = async twoFactorState => {
 // we have this so that we can do try a publish again after a publish without
 // the call being wrapped in the npm request limit and causing the publishes to potentially never run
 async function internalPublish(packageJson, opts, twoFactorState) {
-  let publishTool = await getPublishTool(opts.cwd);
   let publishFlags = opts.access ? ["--access", opts.access] : [];
   publishFlags.push("--tag", opts.tag);
   if ((await twoFactorState.isRequired) && !isCI) {
     let otpCode = await getOtpCode(twoFactorState);
     publishFlags.push("--otp", otpCode);
   }
-  if (publishTool.name === "pnpm" && publishTool.shouldAddNoGitChecks) {
-    publishFlags.push("--no-git-checks");
-  }
   const {
     scope,
     registry
@@ -730,11 +702,9 @@ async function internalPublish(packageJson, opts, twoFactorState) {
     code,
     stdout,
     stderr
-  } = publishTool.name === "pnpm" ? await spawn$1("pnpm", ["publish", "--json", ...publishFlags], {
+  } = await spawn$1("yarn", ["npm", "publish", ...publishFlags], {
     env: Object.assign({}, process.env, envOverride),
     cwd: opts.cwd
-  }) : await spawn$1(publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride)
   });
   if (code !== 0) {
     // NPM's --json output is included alongside the `prepublish` and `postpublish` output in terminal
