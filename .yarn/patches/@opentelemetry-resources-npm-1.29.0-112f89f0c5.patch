diff --git a/build/esm/detectors/platform/node/machine-id/getMachineId.js b/build/esm/detectors/platform/node/machine-id/getMachineId.js
index 267f4af2d1a33a3e17ef1009da5669d3683694f6..61a6e8a77417c039c298bf12ec85daa20ea669fc 100644
--- a/build/esm/detectors/platform/node/machine-id/getMachineId.js
+++ b/build/esm/detectors/platform/node/machine-id/getMachineId.js
@@ -13,23 +13,34 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import * as process from 'process';
-var getMachineId;
-switch (process.platform) {
-    case 'darwin':
-        (getMachineId = require('./getMachineId-darwin').getMachineId);
-        break;
-    case 'linux':
-        (getMachineId = require('./getMachineId-linux').getMachineId);
-        break;
-    case 'freebsd':
-        (getMachineId = require('./getMachineId-bsd').getMachineId);
-        break;
-    case 'win32':
-        (getMachineId = require('./getMachineId-win').getMachineId);
-        break;
+function getMachineId() {
+  switch (process.platform) {
+    case "darwin":
+        return import("./getMachineId-darwin").then(m => {
+            const getMachineId = m.default?.getMachineId || m.getMachineId;
+            return getMachineId();
+        });
+    case "linux":
+        return import("./getMachineId-linux").then((m) => {
+          const getMachineId = m.default?.getMachineId || m.getMachineId;
+          return getMachineId();
+        });
+    case "freebsd":
+        return import("./getMachineId-bsd").then((m) => {
+          const getMachineId = m.default?.getMachineId || m.getMachineId;
+          return getMachineId();
+        });
+    case "win32":
+        return import("./getMachineId-win").then((m) => {
+          const getMachineId = m.default?.getMachineId || m.getMachineId;
+          return getMachineId();
+        });
     default:
-        (getMachineId = require('./getMachineId-unsupported').getMachineId);
+        return import("./getMachineId-unsupported").then((m) => {
+          const getMachineId = m.default?.getMachineId || m.getMachineId;
+          return getMachineId();
+        });
+  }
 }
+
 export { getMachineId };
\ No newline at end of file
-//# sourceMappingURL=getMachineId.js.map
\ No newline at end of file
diff --git a/build/esnext/detectors/platform/node/machine-id/getMachineId.js b/build/esnext/detectors/platform/node/machine-id/getMachineId.js
index 6600fb658cb3330dde569141fafd51c9b2f215e1..e3ec2a33ba6de54910acc571794d791f8a413172 100644
--- a/build/esnext/detectors/platform/node/machine-id/getMachineId.js
+++ b/build/esnext/detectors/platform/node/machine-id/getMachineId.js
@@ -13,23 +13,34 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import * as process from 'process';
-let getMachineId;
-switch (process.platform) {
-    case 'darwin':
-        ({ getMachineId } = require('./getMachineId-darwin'));
-        break;
-    case 'linux':
-        ({ getMachineId } = require('./getMachineId-linux'));
-        break;
-    case 'freebsd':
-        ({ getMachineId } = require('./getMachineId-bsd'));
-        break;
-    case 'win32':
-        ({ getMachineId } = require('./getMachineId-win'));
-        break;
+function getMachineId() {
+  switch (process.platform) {
+    case "darwin":
+      return import("./getMachineId-darwin").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "linux":
+      return import("./getMachineId-linux").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "freebsd":
+      return import("./getMachineId-bsd").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "win32":
+      return import("./getMachineId-win").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
     default:
-        ({ getMachineId } = require('./getMachineId-unsupported'));
+      return import("./getMachineId-unsupported").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+  }
 }
 export { getMachineId };
 //# sourceMappingURL=getMachineId.js.map
\ No newline at end of file
diff --git a/build/src/detectors/platform/node/machine-id/getMachineId.js b/build/src/detectors/platform/node/machine-id/getMachineId.js
index 9c1877c31fda380b7c6e64491400972fb8dc297c..b9f75f108d4e9ec3b1abce02184fe5dbd6964f2d 100644
--- a/build/src/detectors/platform/node/machine-id/getMachineId.js
+++ b/build/src/detectors/platform/node/machine-id/getMachineId.js
@@ -1,6 +1,5 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getMachineId = void 0;
 /*
  * Copyright The OpenTelemetry Authors
  *
@@ -16,23 +15,33 @@ exports.getMachineId = void 0;
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-const process = require("process");
-let getMachineId;
-exports.getMachineId = getMachineId;
-switch (process.platform) {
-    case 'darwin':
-        (exports.getMachineId = getMachineId = require('./getMachineId-darwin').getMachineId);
-        break;
-    case 'linux':
-        (exports.getMachineId = getMachineId = require('./getMachineId-linux').getMachineId);
-        break;
-    case 'freebsd':
-        (exports.getMachineId = getMachineId = require('./getMachineId-bsd').getMachineId);
-        break;
-    case 'win32':
-        (exports.getMachineId = getMachineId = require('./getMachineId-win').getMachineId);
-        break;
+exports.getMachineId = function getMachineId() {
+  switch (process.platform) {
+    case "darwin":
+      return import("./getMachineId-darwin").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "linux":
+      return import("./getMachineId-linux").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "freebsd":
+      return import("./getMachineId-bsd").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+    case "win32":
+      return import("./getMachineId-win").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
     default:
-        (exports.getMachineId = getMachineId = require('./getMachineId-unsupported').getMachineId);
+      return import("./getMachineId-unsupported").then((m) => {
+        const getMachineId = m.default?.getMachineId || m.getMachineId;
+        return getMachineId();
+      });
+  }
 }
-//# sourceMappingURL=getMachineId.js.map
\ No newline at end of file
+
