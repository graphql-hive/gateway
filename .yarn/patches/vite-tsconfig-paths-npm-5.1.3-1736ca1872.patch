diff --git a/dist/index.js b/dist/index.js
index fd80220e82cb48bd62bad219f502f4b6b1d1f89a..d97a44d786675883df5da8b17d81162280097915 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -55,6 +55,7 @@ var notApplicable = [void 0, false];
 var notFound = [void 0, true];
 var src_default = (opts = {}) => {
   let resolversByDir;
+  let inlinedModules;
   return {
     name: "vite-tsconfig-paths",
     enforce: "pre",
@@ -67,9 +68,14 @@ var src_default = (opts = {}) => {
       } else {
         workspaceRoot = searchForWorkspaceRoot(projectRoot);
       }
+      inlinedModules = config.test?.server?.deps?.inline; // array or boolean
+      if (!Array.isArray(inlinedModules)) {
+        inlinedModules = [];
+      }
       debug("options.root   ==", root);
       debug("project root   ==", projectRoot);
       debug("workspace root ==", workspaceRoot);
+      debug("inlined modules ==", inlinedModules);
       if (root) {
         projectRoot = root;
         workspaceRoot = root;
@@ -280,14 +286,18 @@ var src_default = (opts = {}) => {
       var _a2;
       importer = normalizePath2(importer);
       const importerFile = importer.replace(/[#?].+$/, "");
-      if (!importerExtRE.test(importerFile)) {
-        debugResolve("importer has unsupported extension. skipping...");
-        return notApplicable;
-      }
-      const relativeImporterFile = relative(configDir, importerFile);
-      if (!isIncludedRelative(relativeImporterFile)) {
-        debugResolve("importer is not included. skipping...");
-        return notApplicable;
+      if (inlinedModules.some((m) => m.test(importerFile))) {
+        debugResolve("inlined importer. skipping checks...");
+      } else {
+        if (!importerExtRE.test(importerFile)) {
+          debugResolve("importer has unsupported extension. skipping...");
+          return notApplicable;
+        }
+        const relativeImporterFile = relative(configDir, importerFile);
+        if (!isIncludedRelative(relativeImporterFile)) {
+          debugResolve("importer is not included. skipping...");
+          return notApplicable;
+        }
       }
       const suffix = (_a2 = /\?.+$/.exec(id)) == null ? void 0 : _a2[0];
       if (suffix) {
